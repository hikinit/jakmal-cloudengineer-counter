#!/bin/bash
# Docker-compose wrapper for easy deployment
set -e
trap EXIT

# Variables
_program_name=$(basename $0)
_available_commands=(
  init up down build logs restart sh
  artisan test composer mysql redis help
  release "local"
)
_command=${1:-help}

# Utilities
_blank() {
  [[ -z "$1" ]]
}

_file_exist() {
  [[ -f "$1" ]]
}

_confirm() {
  read -ep "${1:-Are you sure?} [y/N]: " _confirmation
  _confirmation="${_confirmation:-n}"

  case "${_confirmation}" in
  [yY])
    :
    ;;
  *)
    exit 0
    ;;
  esac
}

_throw_error() {
  local _message=$1
  shift

  {
    echo "Error: ${_message}"

    for _error in "$@"; do
      echo "${_error}"
    done

    echo "Run '${_program_name} help' for usage."
  } >&2

  exit 1
}

_argument_exceed() {
  local _expected=$1
  local _passed=$2
  local _message=$3

  if [[ ${_passed} -gt ${_expected} ]]; then
    _throw_error "Expected ${_expected} argument, ${_passed} given. ${_message}"
  fi
}

_no_argument() {
  _argument_exceed 0 $# "Not required keyword '$@'"
}

_docker_compose() {
  if _blank "${DOCKER_COMPOSE_USER}" && _blank "${DOCKER_COMPOSE_USER_GROUP}"; then
    _throw_error "Missing environment variables." \
      " - DOCKER_COMPOSE_USER is not set" \
      " - DOCKER_COMPOSE_USER_GROUP is not set"
  fi

  local _infra_env=$(< .infra-env)
  docker-compose \
    --file "docker-compose.yaml" \
    --file "docker-compose.${_infra_env}.yaml" \
    --env-file ".env.docker-compose" \
    "$@"
}

_docker_compose_run() {
  _docker_compose "run" "$@"
}

_docker_compose_exec() {
  _docker_compose "exec" "$@"
}

_check_env_file() {
  if ! _file_exist ".env"; then
    echo -n "Creating .env file ... "
    echo "APP_KEY=" >.env
    echo "Done"
  fi
}

_set_env() {
  echo $1 > .infra-env
  echo "Set infra environment to $1"
}

_is_env() {
  [[ "$(< .infra-env)" == "$1" ]]
}

# Commands
_do_init() {
  _no_argument "$@"
  _check_env_file

  _is_env "local" && _do_composer "install"

  _do_build
  _do_up

  if _is_env "local"; then
    _do_artisan "key:generate"
    _docker_compose_exec \
      "worker" \
      "wait-for" \
      "mysql:3306" \
      "--" \
      "php" \
      "artisan" \
      "migrate"
  fi
}

_do_up() {
  _no_argument "$@"
  _docker_compose "up" "-d"
}

_do_down() {
  _no_argument "$@"
  _confirm "Are you sure you want to stop the infrastructure?"
  _docker_compose "down"
}

_do_build() {
  _docker_compose "build" "$@"
}

_do_logs() {
  _docker_compose "logs" "$@"
}

_do_restart() {
  _confirm "Are you sure you want to restart the services?"
  _docker_compose "restart" "$@"
}

_do_sh() {
  _blank "$1" && _throw_error "Missing service name"
  _argument_exceed 1 $#
  _docker_compose_exec "$1" "sh"
}

_do_artisan() {
  _docker_compose_exec "worker" "php" "artisan" "$@"
}

_do_test() {
  _docker_compose_exec "worker" "vendor/bin/phpunit" "$@"
}

_do_composer() {
  _docker_compose_run "--rm" "composer" "$@"
}

_do_mysql() {
  _no_argument "$@"
  _docker_compose_exec "mysql" "mysql" "-u" "root"
}

_do_redis() {
  _no_argument "$@"
  _docker_compose_exec "redis" "redis-cli"
}

_do_release() {
  _no_argument "$@"
  _set_env "release"
  _do_up
}

_do_local() {
  _no_argument "$@"
  _set_env "local"
  _do_up
}

_do_help() {
  _no_argument "$@"
  echo """
Counter App Dev Tools [$(< .infra-env)]

Usage:
   ${_program_name} [command] [arguments]

Available commands:
   init                  Initialize the infrastructure for the first time
   up                    Start the infrastructure
   down                  Stop the infrastructure
   build [services?]     Build image for all or given services
   logs [services?]      View logs for all or given services
   restart [services?]   Restart all or given services
   sh [service]          Exec sh in the given service
   artisan [arguments?]  Exec artisan command in the worker service
   test [arguments?]     Run phpunit in the worker service
   composer [arguments?] Run composer in the composer service
   mysql                 Run mysql cli as root in the mysql service
   redis                 Run redis cli in the redis service
   help                  Print all the available commands
   release               Use release image
   local                 Use local image
"""
}

# Entrypoint
_main() {
  ! _file_exist ".infra-env" && _set_env "local" &> /dev/null

  if [[ " ${_available_commands[@]} " =~ " ${_command} " ]]; then
    _do_${_command} "$@"
  else
    _throw_error "Unknown command: '${_command}'"
  fi
}

shift
_main "$@"
