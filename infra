#!/bin/bash

# Variables
_program_name=$(basename $0)
_available_commands=(
  init up down build logs restart sh
  artisan test composer mysql redis help
)
_command=${1:-help}
_docker_compose_env_file=".env.docker-compose"

# Utilities
_blank() {
  [[ -z "$1" ]]
}

_file_exist() {
  [[ -f "$1" ]]
}

_throw_error() {
  local _message=$1
  shift

  echo "Error: ${_message}"

  for _error in "$@"; do
  echo "${_error}"
  done

  echo "Run '${_program_name} help' for usage."
  exit 1
}

_argument_exceed() {
  local _expected=$1
  local _passed=$2
  local _message=$3

  if [[ ${_passed} -gt ${_expected} ]]; then
    _throw_error "Expected ${_expected} argument, ${_passed} given. ${_message}"
  fi
}

_no_argument() {
  _argument_exceed 0 $# "Not required keyword '$@'"
}

_docker_compose() {
  if _blank "${DOCKER_COMPOSE_USER}" && _blank "${DOCKER_COMPOSE_USER_GROUP}"; then
    _throw_error "Missing environment variables" \
      "- DOCKER_COMPOSE_USER is not set" \
      "- DOCKER_COMPOSE_USER_GROUP is not set"
  fi
  docker-compose --env-file ${_docker_compose_env_file} "$@"
}

_docker_compose_run() {
  _docker_compose "run" "$@"
}

_docker_compose_exec() {
  _docker_compose "exec" "$@"
}

_env_check() {
  if ! _file_exist ".env"; then
    echo -n "Creating .env file ... "
    echo "APP_KEY=" >.env
    echo "Done"
  fi
}

# Commands
_do_init() {
  _no_argument "$@"
  _env_check
  _do_composer "install"
  _do_build
  _do_up
  _do_artisan "key:generate"
  _do_artisan "migrate"
}

_do_up() {
  _no_argument "$@"
  _docker_compose "up" "-d"
}

_do_down() {
  _no_argument "$@"
  _docker_compose "down"
}

_do_build() {
  _docker_compose "build" "$@"
}

_do_logs() {
  _docker_compose "logs" "$@"
}

_do_restart() {
  _docker_compose "restart" "$@"
}

_do_sh() {
  _blank "$1" && _throw_error "Missing service name"
  _argument_exceed 1 $#
  _docker_compose_exec "$1" "sh"
}

_do_artisan() {
  _docker_compose_exec "worker" "php" "artisan" "$@"
}

_do_test() {
  _docker_compose_exec "worker" "vendor/bin/phpunit" "$@"
}

_do_composer() {
  _docker_compose_run "--rm" "composer" "$@"
}

_do_mysql() {
  _no_argument "$@"
  _docker_compose_exec "mysql" "mysql" "-u" "root"
}

_do_redis() {
  _no_argument "$@"
  _docker_compose_exec "redis" "redis-cli"
}

_do_help() {
  _no_argument "$@"
  echo """
Counter App Dev Tools

Usage:
   ${_program_name} [command] [arguments]

Available commands:
   init                  Initialize the infrastructure for the first time
   up                    Start the infrastructure
   down                  Stop infrastructure
   build [services?]     Build image for all or given services
   logs [services?]      View logs for all or given services
   restart [services?]   Restart all or given services
   sh [service]          Exec sh in the given service
   artisan [arguments?]  Exec artisan command in the worker service
   test [arguments?]     Run phpunit in the worker service
   composer [arguments?] Run composer in the composer service
   mysql                 Run mysql cli as root in the mysql service
   redis                 Run redis cli in the redis service
   help                  Print all the available commands
"""
}

# Entrypoint
_main() {
  if [[ " ${_available_commands[@]} " =~ " ${_command} " ]]; then
    _do_${_command} "$@"
  else
    _throw_error "Unknown keyword: '${_command}'"
  fi
}

shift
_main "$@"
